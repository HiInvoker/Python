#选择排序法（版本1）
1）找出最小元素
2）删除它，然后将其插入相应的位置
3）对于剩余的元素，重复步骤1和2

def selection_sort(lst):
    for i in range(len(lst)):  #序号0到倒数第二个
        min_index = i
        for j in range(i+1, len(lst)):  #i+1 到列表的最后一个
            if lst[j] < lst[min_index]:
                min_index = j
        lst.insert(i, lst.pop(min_index))

lst = [14,2,3,1,35,23]

selection_sort(lst)

print(lst)

#选择排序（版本2）
1）找到最小元素
2）和第一个元素交换
3）对于剩余元素，重复1和2

def swap(lst, a,b):
    tmp = lst[a]
    lst[a] = lst[b]
    lst[b] = tmp

def sel_sort(lst):
    for i in range(len(lst)): 
        min_index = i
        for j in range(i+1,len(lst)):
             if lst[j] < lst[min_index]:
                 min_index = j
        swap(lst, i,min_index)

lst = [1,3,5,7,9,8,4,2]

sel_sort(lst)

print(lst)

#冒泡排序法

def bubble_sort(lst):
    is_exchanged = 1

    while is_exchanged:
        is_exchanged = 0
        top = len(lst)-1

        for i in range(top):
            if lst[i] > lst[i+1]:
                swap(lst, i,i+1)
                is_exchanged = 1
                top -= 1

def swap(lst, a,b):
    tmp = lst[a]
    lst[a] = lst[b]
    lst[b] = tmp

lst = [1,3,5,7,9,8,4,2]

bubble_sort(lst)

print(lst)

#内建函数

sorted() 函数
sorted(a)
不改变列表a

list.sort() 方法
a.sort()
改变a

算法：quicksort
时间复杂度: O(nlogn)

 











